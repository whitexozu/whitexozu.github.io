{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Framework","result":{"pageContext":{"currentCategory":"Framework","categories":["All","Framework","블로그","Server"],"edges":[{"node":{"id":"6dcdc2ea-0dda-5bb8-9667-e2fa5eff4be4","excerpt":"JUnit 사용을 습관화 하기위해 정리 하려 합니다. TDD 장점 톰캣을 계속내렸다 올릴 필요가 없습니다. 자동검증이 가능합니다. 유지보수/디버깅이 쉽습니다. TDD 개발 순서 빈 실행코드 작성 테스트 코드 작성 실행코드 리팩토링 실습 프로젝트 생성 응답 코드 확인 MemoController.java 생성 MemoControllerTest.java 생성 응답 데이터 확인 MemoController.java 수정 MemoControllerTest.java 수정 DTO 테스트 MemoResponseDto.java 생성 MemoResponseDtoTest.java 생성 vscode에서 test 실행 클래스 전체 테스트: 클래스명 위의 Run Test 클릭 메소드 테스트: 메소드명 위의 Run Test 클릭 vscode에서 test 결과창이 안보일때 하단의 결과 영역을 클릭하면 됩니다. TDD 장점 TDD 개발 순서 실습 응답 코드 확인 응답 데이터 확인 DTO 테스트 vscode에서 t…","fields":{"slug":"/2021-10-23-framework-springboot-tdd/"},"frontmatter":{"categories":"Framework","title":"[TDD] Springboot tdd","date":"October 23, 2021"}},"next":{"fields":{"slug":"/2021-09-23-framework-springboot-msa/"}},"previous":null},{"node":{"id":"b3dbf41b-8816-5742-8a7f-eea5954c3e7d","excerpt":"MSA를 공부하기로 했습니다. 설명 모놀리식 모놀리식 이란 모놀리식 아키텍쳐란, 마이크로서비스 아키텍쳐의 반대 되는 개념으로 전통의 아키텍쳐를 지칭하는 의미로 생겨난 단어입니다. 하나의 서비스 또는 애플리케이션이 하나의 거대한 아키텍쳐를 모놀리식(Monolithic)하다고 합니다. 장점 개발 초기에 단순한 아키텍쳐 구조와 개발에 용이합니다. 어떤 서비스든지 개발되어있는 환경이 같아서 복잡하지 않습니다. 쉽게 고가용성 서버 환경을 만들 수 있습니다. End-to-End 테스트가 용이합니다. 단점 프로젝트의 규모가 커짐에 따라 애플리케이션 구동시간이 늘어나고 빌드, 배포 시간도 길어집니다. 조그마한 수정사항이 있어도 전체를 다시 빌드하고 배포를 해야합니다. 많은 양의 코드가 몰려있어 개발자가 모두를 이해 할 수 없고 유지보수도 힘듭니다. 일부분의 오류가 전체에 영향을 미칩니다. 기능별로 알맞는 기술, 언어, 프레임워크를 선택하기가 까다롭습니다. 시간이 지남에따라 공통 비즈니스 프로세스…","fields":{"slug":"/2021-09-23-framework-springboot-msa/"},"frontmatter":{"categories":"Framework","title":"[MSA] Springboot msa service","date":"September 23, 2021"}},"next":{"fields":{"slug":"/gatsby-github-blog/"}},"previous":{"fields":{"slug":"/2021-10-23-framework-springboot-tdd/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}