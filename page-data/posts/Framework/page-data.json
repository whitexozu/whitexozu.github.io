{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Framework","result":{"pageContext":{"currentCategory":"Framework","categories":["All","Language","Framework","SERVER","Certification","Javascript","Application","Database","OpenAPI","language","Server","SCM","Message","Queue","Package","VM","Tool","WebServier","Open","API","CI"],"edges":[{"node":{"id":"6dcdc2ea-0dda-5bb8-9667-e2fa5eff4be4","excerpt":"JUnit 사용을 습관화 하기위해 정리 하려 합니다. TDD 장점 톰캣을 계속내렸다 올릴 필요가 없습니다. 자동검증이 가능합니다. 유지보수/디버깅이 쉽습니다. TDD 개발 순서 빈 실행코드 작성 테스트 코드 작성 실행코드 리팩토링 실습 프로젝트 생성 응답 코드 확인 MemoController.java 생성 MemoControllerTest.java 생성 응답 데이터 확인 MemoController.java 수정 MemoControllerTest.java 수정 DTO 테스트 MemoResponseDto.java 생성 MemoResponseDtoTest.java 생성 vscode에서 test 실행 클래스 전체 테스트: 클래스명 위의 Run Test 클릭 메소드 테스트: 메소드명 위의 Run Test 클릭 TDD 장점 TDD 개발 순서 실습 응답 코드 확인 응답 데이터 확인 DTO 테스트 vscode에서 test 실행","fields":{"slug":"/2021-10-23-framework-springboot-tdd/"},"frontmatter":{"categories":"Framework","title":"[TDD] Springboot tdd","date":"October 23, 2021"}},"next":{"fields":{"slug":"/2021-09-23-framework-springboot-msa/"}},"previous":null},{"node":{"id":"b3dbf41b-8816-5742-8a7f-eea5954c3e7d","excerpt":"MSA를 공부하기로 했습니다. 설명 모놀리식 모놀리식 이란 모놀리식 아키텍쳐란, 마이크로서비스 아키텍쳐의 반대 되는 개념으로 전통의 아키텍쳐를 지칭하는 의미로 생겨난 단어입니다. 하나의 서비스 또는 애플리케이션이 하나의 거대한 아키텍쳐를 모놀리식(Monolithic)하다고 합니다. 장점 개발 초기에 단순한 아키텍쳐 구조와 개발에 용이합니다. 어떤 서비스든지 개발되어있는 환경이 같아서 복잡하지 않습니다. 쉽게 고가용성 서버 환경을 만들 수 있습니다. End-to-End 테스트가 용이합니다. 단점 프로젝트의 규모가 커짐에 따라 애플리케이션 구동시간이 늘어나고 빌드, 배포 시간도 길어집니다. 조그마한 수정사항이 있어도 전체를 다시 빌드하고 배포를 해야합니다. 많은 양의 코드가 몰려있어 개발자가 모두를 이해 할 수 없고 유지보수도 힘듭니다. 일부분의 오류가 전체에 영향을 미칩니다. 기능별로 알맞는 기술, 언어, 프레임워크를 선택하기가 까다롭습니다. 시간이 지남에따라 공통 비즈니스 프로세스…","fields":{"slug":"/2021-09-23-framework-springboot-msa/"},"frontmatter":{"categories":"Framework","title":"[MSA] Springboot msa service","date":"September 23, 2021"}},"next":{"fields":{"slug":"/2021-06-07-certification-amp/"}},"previous":{"fields":{"slug":"/2021-10-23-framework-springboot-tdd/"}}},{"node":{"id":"b6adc143-562f-5346-bd6d-3493d224b4b2","excerpt":"서버 한대에 한개의 Nginx와 두개의 톰켓 서버를 뛰워야 할 일이 생겼습니다.\n맞는 방법인지는 모르나 일단 잘 돌아가는건 확인해서 나중에 같은 작업을 할때 참고하기 위해 작성하겠습니다. frontend .env api/index.js vue.config.js backend applicatioln.yml OpenApiconfig.java (swagger config file) CommonSession.java frontend .env api/index.js vue.config.js backend applicatioln.yml OpenApiconfig.java (swagger config file) CommonSession.java","fields":{"slug":"/2021-06-04-framework-springboot-vue-context-path/"},"frontmatter":{"categories":"Framework","title":"[context-path] springboot + swagger2 + vue context-path 적용","date":"June 04, 2020"}},"next":{"fields":{"slug":"/2021-06-02-openapi-google-drive-api/"}},"previous":{"fields":{"slug":"/2020-06-29-server-nginx-install-tomcat-redirect/"}}},{"node":{"id":"28d2b35c-3a71-57e4-ab8b-512ead08b9fc","excerpt":"많이 늦었지만 JPA를 써볼려고 합니다. 개발 환경 gradle + lombok + mysql + jpa dependency 추가 dependencies {\nimplementation ‘org.springframework.boot:spring-boot-starter-data-jpa’\nimplementation ‘org.springframework.boot:spring-boot-starter-oauth2-client’\nimplementation ‘org.springframework.boot:spring-boot-starter-security’\nimplementation ‘org.springframework.boot:spring-boot-starter-thymeleaf’\nimplementation ‘org.springframework.boot:spring-boot-starter-web’\ncompileOnly ‘org.projectlombok:lombok’\ndevelopmentOnly …","fields":{"slug":"/2020-04-10-framework-springboot-jpa/"},"frontmatter":{"categories":"Framework","title":"[JPA] Springboot + JPA + MySql","date":"April 10, 2020"}},"next":{"fields":{"slug":"/2020-03-26-language-python-macro-find-image/"}},"previous":{"fields":{"slug":"/2020-04-27-language-python-design-pattern/"}}},{"node":{"id":"55ee6195-a8d5-52d1-8ef1-c994f94e3627","excerpt":"사용자에게 뉴스레터, 공지 이메일 등의 이메일을 HTML 형식으로 발송해야 할 때가 있습니다.\n통이미지로 보내면 편하겠지만 텍스트가 수시로 바뀌거나 다국어가 지원돼야\u001d 하는 경우 HTML로 작성해야 합니다.\n그럼 퍼블리셔팀에게 요청하게 되고 과  확인 후 단순한 페이지도 최소 2일 정도에 시간이 필요하다고 합니다.\n생각보다 오래 걸리네 라는 생각이 듭니다. 그리고 템플릿 코드를 받아보면 무지의 소치에서 나온 생각임을 깨닫게 됩니다.(제 이야기 입니다)\n\n결론부터 말하자면 이메일은 HTML 표준이 없습니다.\n이메일 클라이언트에 따라 허용되는 HTML에 대중이 없습니다. 필수 클라이언트의 종류가 많아질수록 코드는 예외 처리와 핵이 난무하게 됩니다.\n상황이 이러다 보니  같은 웹 및 이메일 템플릿을 쉽게 디자인 할 수 있는 프레임워크를 사용하게 됩니다. 설치 방법 및 실행 세상 간단합니다. 그럼 브라우저에서 사이트가 열리는것을 확인 할 수 있습니다. Note:\nnvm을 사용한 테스트 결…","fields":{"slug":"/2020-03-12-framework-email-template-zurbfoundation/"},"frontmatter":{"categories":"Framework","title":"[Email template] ZURB Foundation","date":"March 12, 2020"}},"next":{"fields":{"slug":"/2020-03-12-language-python-image-processing/"}},"previous":{"fields":{"slug":"/2020-03-20-server-mysql-upgrade/"}}},{"node":{"id":"4ad4b2db-9d9f-5b56-8cc4-ccf0a4b24728","excerpt":"Spring Security 장점 프로그램 로직보다 설정으로 페이지나 리소스 접근 제어 JDBC, LDAP 등 호환되는 인증 커넥터 다수 CSRF 등 강력한 보안 인증 폴더구조 의존성 추가 Spring Security 설정 SecurityConfig.java @EnableWebSecurity @Configuration 클래스에 @EnableWebSecurity 어노테이션을 추가하여 Spring Security 설정할 클래스라고 정의합니다. 설정은 WebSebSecurityConfigurerAdapter 클래스를 상속받아 메서드를 구현하는 것이 일반적인 방법입니다. WebSecurityConfigurerAdapter 클래스 WebSecurityConfigurer 인스턴스를 편리하게 생성하기 위한 클래스입니다. passwordEncoder() BCryptPasswordEncoder는 Spring Security에서 제공하는 비밀번호 암호화 객체입니다. Service에서 비밀번호를 암호…","fields":{"slug":"/2020-03-04-framework-springboot-security/"},"frontmatter":{"categories":"Framework","title":"[Security] Springboot + Security + MySQL","date":"March 04, 2020"}},"next":{"fields":{"slug":"/2020-03-04-language-java-optional/"}},"previous":{"fields":{"slug":"/2020-03-06-language-java-enum/"}}},{"node":{"id":"28d774f9-e303-5178-9a00-804a0bcf8a3a","excerpt":"VSCode에서 Springboot Gradle 프로젝트를 생성 후 관련 명령어들을 실행 하도록 하겠습니다. 프로젝트 생성 vscode extensions 중 Java Extension Pack (Microsoft), Spring Boot Extension Pack (Pivotal) 를 추가하면 생성이 가능합니다.\ncommand + shift + p 를 누르고 Spring Initalizr: Generate a Gradle Project 선택 후 추가 정보를 입력 및 선택합니다.\n그럼 bulid.gradle, gradlew 등 관련 파일들이 생성된것을 확인 할 수 있습니다. tasks 실행 명령어 별 설명이 없어도 이해할 수 있는 명령들 입니다. application 실행 gradle 프로젝트 생성시 타입을 java-applicaiton 주면 자동 셋팅 되지만 그렇지 않을경우 몇가지를 추가해야 메인 클레스를 실행 할 수 있습니다. 물론 스프링 메인 함수도 실행 가능 합니다. bui…","fields":{"slug":"/2020-03-02-framework-springboot-gradle/"},"frontmatter":{"categories":"Framework","title":"[Gradle] Springboot + Gradle","date":"March 02, 2020"}},"next":{"fields":{"slug":"/2020-02-26-language-java-lambda-stream/"}},"previous":{"fields":{"slug":"/2020-03-04-language-java-optional/"}}},{"node":{"id":"144fa325-7acc-5e20-9988-3742961d4a5a","excerpt":"facebook 클라이언트 등록 https://engkimbs.tistory.com/849 google 클라이언트 등록 https://engkimbs.tistory.com/849 kakao 클라이언트 등록 https://galid1.tistory.com/582 naver 클라이언트 등록 https://engkimbs.tistory.com/849 OAuth2 설정 application.yml SecurityConfig.java OAuth2의 인증 설징시 WebSecurityConfigurerAdapter클래스를 상속받으면 으로 ClientRegistrationRepository 메소드를 작성해야 합니다. 그러면 OAuth2 서비스를 제공하는 업체 facebook, google, kakao, naver의 인증에 필요한 정보를 InMemoryClientRegistrationRepository로 반환합니다. CustomOAuth2Provider.java 국내 기업의 인증에 필요한 정보는 …","fields":{"slug":"/2020-02-20-framework-oauth2-springboot-facebook-google-kakao-naver/"},"frontmatter":{"categories":"Framework","title":"[OAuth2] Springboot + Facebook, Google, kakao, naver ","date":"February 20, 2020"}},"next":{"fields":{"slug":"/2020-02-19-framework-oauth2-springboot-naver-jsp/"}},"previous":{"fields":{"slug":"/2020-02-25-scm-create-github-blog/"}}},{"node":{"id":"1556ed1c-fcd2-58bc-aff2-f0ab6f87d8f4","excerpt":"Naver developers > Application > Application 등록 소스 작성 https://developers.naver.com/main/ https://bumcrush.tistory.com/151 https://4urdev.tistory.com/47 Naver developers > Application > Application 등록 소스 작성","fields":{"slug":"/2020-02-19-framework-oauth2-springboot-naver-jsp/"},"frontmatter":{"categories":"Framework","title":"[OAuth2] Springboot + naver + jsp","date":"February 19, 2020"}},"next":{"fields":{"slug":"/2020-02-12-ci-centos7-jenkins/"}},"previous":{"fields":{"slug":"/2020-02-20-framework-oauth2-springboot-facebook-google-kakao-naver/"}}},{"node":{"id":"77bdd55e-8826-5e97-9e9d-361a5b846f8d","excerpt":"스웨거 참 좋은것 같습니다. maven dependency 추가 javacofnig 생성 /src/main/java/com/example/swagger/config/SwaggerConfig.java test controller 생성 /src/main/java/com/example/swagger/controller/BoardController.java 확인 http://localhost:8080/swagger-ui.html annotation 설명 @Api : 컨트롤러에 설명을 추가 @ApiOperation : API에 설명을 추가 @ApiParam : API의 파라미터에 설명을 추가 @ApiModel : 모델에 설명을 추가 @ApiModelProperty : 모델의 요소에 설명을 추가 maven dependency 추가 javacofnig 생성 test controller 생성 확인 annotation 설명","fields":{"slug":"/2020-02-11-framework-springboot-swagger/"},"frontmatter":{"categories":"Framework","title":"[Swagger] Springboot + swagger","date":"February 11, 2020"}},"next":{"fields":{"slug":"/2020-02-10-server-gcp-mysql-jdk-jenkins/"}},"previous":{"fields":{"slug":"/2020-02-12-ci-centos7-jenkins/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}